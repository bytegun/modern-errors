extends: '.eslintrc.base.yml'
rules:
  fp/no-class: 0
overrides:
  - files: ['**/*.md/*.{js,ts}']
    # `use strict` is too verbose in documentation
    parserOptions:
      ecmaFeatures:
        impliedStrict: true
    rules:
      # We want to keep Markdown code examples short
      strict: 0
      import/newline-after-import: 0

      # Markdown filenames do not match code examples
      camelcase: 0
      filenames/match-exported: 0
      filenames/match-regex: 0
      unicorn/filename-case: 0

      # Documentation code often misses context lines, leading to variables
      # looking unused or undefined
      no-undef: 0

  - files: ['**/*.md/*.js']
    rules:
      # Documentation code often misses context lines, leading to variables
      # looking unused or undefined
      no-unused-vars: 0

  - files: ['**/*.md/*.ts']
    rules:
      '@typescript-eslint/no-unused-vars': 0

  - files: ['**/*.md/*.{js,ts}', 'examples/**/*.{js,cjs,mjs,ts,cts,mts}']
    rules:
      # Examples sometimes start with a number
      filenames/match-regex:
        - 2
        - ^[a-zA-Z0-9_][a-zA-Z0-9_.]+$

      # Examples print their output at the end of the file
      # It might happen in documentation as well
      no-console: 0
      no-restricted-globals: 0

      # Inline comments can be nicer in documentation
      # Examples usually include the return value as inline comments
      line-comment-position: 0
      no-inline-comments: 0

      # Documentation often require the module itself.
      # Also documentation can require a module that does not exist.
      # Examples point to already built files which might not be created yet
      # if the user just cloned the repository
      import/no-unresolved: 0
      import/no-extraneous-dependencies: 0
      n/no-missing-require: 0
      n/no-extraneous-require: 0
      n/no-extraneous-import: 0
      n/no-unpublished-require: 0
      n/no-missing-import: 0

      # Examples sometimes use default exports
      import/no-default-export: 0
      import/no-anonymous-default-export: 0

      # Using those globals is simpler in documentation
      n/prefer-global/buffer: 0
      n/prefer-global/process: 0
      n/prefer-global/url: 0

      # Example test files
      ava/no-ignored-test-files: 0

      # Too verbose for documentation
      strict: 0

      # Fixture files are sometimes executed by a CLI without exporting nor
      # importing anything
      import/unambiguous: 0

      # Sometimes useful in documentation
      no-empty: 0

      # Filenames do not always match in documentation
      filenames/match-exported: 0

      # Short variables can be useful in examples
      id-length: 0

      # Only useful runtime, not in documentation
      symbol-description: 0

      # We allow asserts as they are simple
      no-restricted-imports: 0

  - files: ['**/*.md/*.js', 'examples/**/*.{js,cjs,mjs}']
    rules:
      # Inlining constants is simpler for examples
      no-magic-numbers: 0

      # Sometimes useful in documentation
      no-empty-function: 0

      # We allow asserts as they are simple
      no-restricted-imports: 0

  - files: ['**/*.md/*.ts', 'examples/**/*.{ts,cts,mts}']
    rules:
      '@typescript-eslint/no-magic-numbers': 0
      '@typescript-eslint/no-empty-function': 0
      '@typescript-eslint/no-restricted-imports': 0

  # `eslint-config-markdown` does not work with `parserOptions.project`, which
  # removes some rules
  - files: ['**/*.md/*.ts']
    parserOptions:
      project: null
    rules:
      '@typescript-eslint/await-thenable': 0
      '@typescript-eslint/consistent-type-exports': 0
      '@typescript-eslint/dot-notation': 0
      '@typescript-eslint/naming-convention': 0
      '@typescript-eslint/no-base-to-string': 0
      '@typescript-eslint/no-confusing-void-expression': 0
      '@typescript-eslint/no-floating-promises': 0
      '@typescript-eslint/no-for-in-array': 0
      '@typescript-eslint/no-implied-eval': 0
      '@typescript-eslint/no-meaningless-void-operator': 0
      '@typescript-eslint/no-misused-promises': 0
      '@typescript-eslint/non-nullable-type-assertion-style': 0
      '@typescript-eslint/no-redundant-type-constituents': 0
      '@typescript-eslint/no-throw-literal': 0
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 0
      '@typescript-eslint/no-unnecessary-condition': 0
      '@typescript-eslint/no-unnecessary-qualifier': 0
      '@typescript-eslint/no-unnecessary-type-arguments': 0
      '@typescript-eslint/no-unnecessary-type-assertion': 0
      '@typescript-eslint/no-unsafe-argument': 0
      '@typescript-eslint/no-unsafe-assignment': 0
      '@typescript-eslint/no-unsafe-call': 0
      '@typescript-eslint/no-unsafe-member-access': 0
      '@typescript-eslint/no-unsafe-return': 0
      '@typescript-eslint/prefer-includes': 0
      '@typescript-eslint/prefer-nullish-coalescing': 0
      '@typescript-eslint/prefer-readonly': 0
      '@typescript-eslint/prefer-readonly-parameter-types': 0
      '@typescript-eslint/prefer-reduce-type-parameter': 0
      '@typescript-eslint/prefer-regexp-exec': 0
      '@typescript-eslint/prefer-return-this-type': 0
      '@typescript-eslint/prefer-string-starts-ends-with': 0
      '@typescript-eslint/promise-function-async': 0
      '@typescript-eslint/require-array-sort-compare': 0
      '@typescript-eslint/require-await': 0
      '@typescript-eslint/restrict-plus-operands': 0
      '@typescript-eslint/restrict-template-expressions': 0
      '@typescript-eslint/return-await': 0
      '@typescript-eslint/strict-boolean-expressions': 0
      '@typescript-eslint/switch-exhaustiveness-check': 0
      '@typescript-eslint/unbound-method': 0

  # Test files, including helpers
  - files: ['src/**/*.test.{js,cjs,mjs,ts,cts,mts}']
    rules:
      # When using data-driven testing, an extra level of depth is implied
      # Also, test() creates a depth level as well
      max-nested-callbacks:
        - 2
        - 3
      max-lines-per-function: 0

      # Self imports
      import/no-unresolved: 0
      n/no-missing-import: 0
      n/no-extraneous-import: 0

      # Empty functions can be useful in tests
      no-empty: 0

      # Often tested as an invalid input
      unicorn/no-null: 0

  - files: ['src/**/*.test.{js,cjs,mjs}']
    rules:
      # Empty functions can be useful in tests
      no-empty-function: 0

      # TODO: fix.
      # # Enforce integration testing
      # no-restricted-imports:
      #   - 2
      #   - patterns:
      #       - group:
      #           ['node:assert', assert, 'node:assert/strict', assert/strict]
      #         message: Please throw an Error instead
      #       - group: ['./*', '!./helpers', '!./fixtures']
      #         message:
      #           Individual files should not be imported in tests. Instead please
      #           use import the main module.

  - files: ['src/**/*.test.{ts,cts,mts}']
    rules:
      '@typescript-eslint/no-empty-function': 0
      '@typescript-eslint/no-restricted-imports':
        - 2
        - patterns:
            - group:
                ['node:assert', assert, 'node:assert/strict', assert/strict]
              message: Please throw an Error instead
            - group: ['./*', '!./helpers', '!./fixtures']
              message:
                Individual files should not be imported in tests. Instead please
                use import the main module.

  # Test helpers and fixtures
  - files: ['src/helpers/**/*.{js,cjs,mjs}', 'src/fixtures/**/*.{js,cjs,mjs}']
    rules:
      # Allow including sibling files
      no-restricted-imports: 0

  - files: ['src/helpers/**/*.{ts,cts,mts}', 'src/fixtures/**/*.{ts,cts,mts}']
    rules:
      '@typescript-eslint/no-restricted-imports': 0

  # Test fixtures
  - files: ['src/fixtures/**/*.{js,cjs,mjs,ts,cts,mts}']
    rules:
      # Fixture files are sometimes executed by a CLI without exporting nor
      # importing anything
      import/unambiguous: 0

  # Gulpfile and gulp tasks
  - files: [gulpfile.js, 'gulp/**/*.{js,cjs,mjs,ts,cts,mts}']
    rules:
      # Gulp tasks sometimes print to console
      no-console: 0
      no-restricted-globals:
        - 2
        - global
        - GLOBAL
        - exports
        - process
        - Buffer
      fp/no-mutation:
        - 2
        - commonjs: true
          exceptions:
            - object: process
              property: exitCode
            - object: error
            - object: req
            - object: request
            - object: res
            - object: response
            - object: state
            - property: description

  # Main entry point
  - files: ['src/main.{js,ts,d.ts}']
    rules:
      filenames/match-exported: 0
      import/no-default-export: 0

  # CLI
  - files:
      [
        'src/bin/**/*.{js,cjs,mjs,ts,cts,mts}',
        'src/bin.{js,cjs,mjs,ts,cts,mts}',
      ]
    rules:
      # CLI often prints to console
      no-console: 0
      no-restricted-globals:
        - 2
        - global
        - GLOBAL
        - exports
        - process
        - Buffer
      # CLI often forwards to main commands using `import * as commands`
      import/no-namespace: 0

  # Benchmark files
  - files: ['benchmark/**/*.{js,cjs,mjs,ts,cts,mts}']
    rules:
      # Often used to signify number of iterations
      filenames/no-index: 0

      # Self imports
      import/no-unresolved: 0
      n/no-missing-import: 0
      n/no-extraneous-import: 0

  - files: ['benchmark/**/*.{js,cjs,mjs}']
    rules:
      # Often used to signify number of iterations
      no-magic-numbers: 0

      # Unused expressions are useful in benchmarks
      no-unused-expressions: 0

  - files: ['benchmark/**/*.{ts,cts,mts}']
    rules:
      '@typescript-eslint/no-magic-numbers': 0
      '@typescript-eslint/no-unused-expressions': 0

  # Type tests
  - files: ['**/*.test-d.ts']
    rules:
      # Unused expressions and arguments are useful in type tests
      no-new: 0
      '@typescript-eslint/no-unused-expressions': 0
      '@typescript-eslint/no-unused-vars':
        - 2
        - args: none

      # Unusual functions or methods or are useful in type tests
      'class-methods-use-this': 0
      '@typescript-eslint/no-useless-constructor': 0
      '@typescript-eslint/no-empty-function': 0

      # `test-d` is dasherized, but rest must use underscores
      filenames/match-regex:
        - 2
        - ^[a-zA-Z_][a-zA-Z0-9_.]+\.test-d$
      unicorn/filename-case:
        - 2
        - case: snakeCase
          ignore:
            - ^[a-zA-Z_][a-zA-Z0-9_.]+\.test-d\.ts$

      # Passing `undefined` is handled differently than passing no argument by
      # TypeScript, which can be tested
      unicorn/no-useless-undefined: 0

  # Files that are sibling to a `*.js` or `*.ts`
  - files: ['**/*.{test.{js,cjs,mjs,ts,cts,mts},d.ts,test-d.ts}']
    rules:
      # Each source file should have a single sibling test file, regardless of
      # its size
      max-lines: 0
